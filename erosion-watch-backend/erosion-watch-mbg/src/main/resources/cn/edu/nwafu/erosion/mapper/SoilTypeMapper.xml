<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.nwafu.erosion.mapper.SoilTypeMapper">
    <resultMap id="BaseResultMap" type="cn.edu.nwafu.erosion.model.SoilType">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="level" jdbcType="INTEGER" property="level"/>
        <result column="soil_quality" jdbcType="VARCHAR" property="soilQuality"/>
        <result column="soil_moisture" jdbcType="VARCHAR" property="soilMoisture"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.nwafu.erosion.model.SoilType">
        <result column="description" jdbcType="LONGVARCHAR" property="description"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, parent_id, name, level, soil_quality, soil_moisture, description
    </sql>
    <sql id="Blob_Column_List">
        description
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="cn.edu.nwafu.erosion.model.SoilTypeExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from soil_type
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="cn.edu.nwafu.erosion.model.SoilTypeExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from soil_type
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from soil_type
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from soil_type
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="cn.edu.nwafu.erosion.model.SoilTypeExample">
        delete from soil_type
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.nwafu.erosion.model.SoilType">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into soil_type (parent_id, name, level,
        soil_quality, soil_moisture, description
        )
        values (#{parentId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER},
        #{soilQuality,jdbcType=VARCHAR}, #{soilMoisture,jdbcType=VARCHAR}, #{description,jdbcType=LONGVARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="cn.edu.nwafu.erosion.model.SoilType">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into soil_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="level != null">
                level,
            </if>
            <if test="soilQuality != null">
                soil_quality,
            </if>
            <if test="soilMoisture != null">
                soil_moisture,
            </if>
            <if test="description != null">
                description,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="parentId != null">
                #{parentId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=INTEGER},
            </if>
            <if test="soilQuality != null">
                #{soilQuality,jdbcType=VARCHAR},
            </if>
            <if test="soilMoisture != null">
                #{soilMoisture,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.nwafu.erosion.model.SoilTypeExample" resultType="java.lang.Long">
        select count(*) from soil_type
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update soil_type
        <set>
            <if test="row.parentId != null">
                parent_id = #{row.parentId,jdbcType=BIGINT},
            </if>
            <if test="row.name != null">
                name = #{row.name,jdbcType=VARCHAR},
            </if>
            <if test="row.level != null">
                level = #{row.level,jdbcType=INTEGER},
            </if>
            <if test="row.soilQuality != null">
                soil_quality = #{row.soilQuality,jdbcType=VARCHAR},
            </if>
            <if test="row.soilMoisture != null">
                soil_moisture = #{row.soilMoisture,jdbcType=VARCHAR},
            </if>
            <if test="row.description != null">
                description = #{row.description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update soil_type
        set id = #{row.id,jdbcType=BIGINT},
        parent_id = #{row.parentId,jdbcType=BIGINT},
        name = #{row.name,jdbcType=VARCHAR},
        level = #{row.level,jdbcType=INTEGER},
        soil_quality = #{row.soilQuality,jdbcType=VARCHAR},
        soil_moisture = #{row.soilMoisture,jdbcType=VARCHAR},
        description = #{row.description,jdbcType=LONGVARCHAR}
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update soil_type
        set id = #{row.id,jdbcType=BIGINT},
        parent_id = #{row.parentId,jdbcType=BIGINT},
        name = #{row.name,jdbcType=VARCHAR},
        level = #{row.level,jdbcType=INTEGER},
        soil_quality = #{row.soilQuality,jdbcType=VARCHAR},
        soil_moisture = #{row.soilMoisture,jdbcType=VARCHAR}
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.nwafu.erosion.model.SoilType">
        update soil_type
        <set>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="name != null and name != ''">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level,jdbcType=INTEGER},
            </if>
            <if test="soilQuality != null and soilQuality != ''">
                soil_quality = #{soilQuality,jdbcType=VARCHAR},
            </if>
            <if test="soilMoisture != null and soilMoisture != ''">
                soil_moisture = #{soilMoisture,jdbcType=VARCHAR},
            </if>
            <if test="description != null and description != ''">
                description = #{description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.nwafu.erosion.model.SoilType">
        update soil_type
        set parent_id     = #{parentId,jdbcType=BIGINT},
            name          = #{name,jdbcType=VARCHAR},
            level         = #{level,jdbcType=INTEGER},
            soil_quality  = #{soilQuality,jdbcType=VARCHAR},
            soil_moisture = #{soilMoisture,jdbcType=VARCHAR},
            description   = #{description,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.nwafu.erosion.model.SoilType">
        update soil_type
        set parent_id     = #{parentId,jdbcType=BIGINT},
            name          = #{name,jdbcType=VARCHAR},
            level         = #{level,jdbcType=INTEGER},
            soil_quality  = #{soilQuality,jdbcType=VARCHAR},
            soil_moisture = #{soilMoisture,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>